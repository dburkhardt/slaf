name: Release to PyPI

on:
  push:
    tags:
      - "v*" # Trigger on version tags

permissions:
  contents: read
  id-token: write # For PyPI authentication

jobs:
  release:
    name: Build and Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0 # Full history for changelog

      - name: Setup uv
        uses: astral-sh/setup-uv@v1
        with:
          version: "latest"

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .uv
          key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml', 'uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: |
          uv sync --extra dev

      - name: Extract version from tag
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "version_clean=${VERSION#v}" >> $GITHUB_OUTPUT

      - name: Update version in pyproject.toml
        run: |
          sed -i "s/version = \".*\"/version = \"${{ steps.version.outputs.version_clean }}\"/" pyproject.toml

      - name: Run tests
        run: |
          uv run pytest tests/ --cov=slaf --cov-report=term-missing

      - name: Build package
        run: |
          uv run python -m build

      - name: Check package
        run: |
          uv run twine check dist/*

      - name: Publish to Test PyPI
        if: contains(github.ref, 'alpha') || contains(github.ref, 'beta') || contains(github.ref, 'rc')
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.TEST_PYPI_API_TOKEN }}
          repository-url: https://test.pypi.org/legacy/
          packages-dir: ./dist/

      - name: Publish to PyPI
        if: "!contains(github.ref, 'alpha') && !contains(github.ref, 'beta') && !contains(github.ref, 'rc')"
        uses: pypa/gh-action-pypi-publish@release/v1
        with:
          password: ${{ secrets.PYPI_API_TOKEN }}

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          generate_release_notes: true
          files: |
            dist/*.whl
            dist/*.tar.gz
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  notify:
    name: Notify Release
    runs-on: ubuntu-latest
    needs: release
    if: always()
    steps:
      - name: Notify on success
        if: needs.release.result == 'success'
        run: |
          echo "✅ Release to PyPI successful!"
          echo "Version: ${{ needs.release.outputs.version }}"

      - name: Notify on failure
        if: needs.release.result == 'failure'
        run: |
          echo "❌ Release to PyPI failed!"
          echo "Check the release job for details."
