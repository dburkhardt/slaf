name: Prepare Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: "Is this a prerelease?"
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.12"

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -e ".[dev]"
          pip install semantic-release

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Determine version bump
        id: version
        run: |
          if [ "${{ github.event.inputs.prerelease }}" = "true" ]; then
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "release_type=prerelease" >> $GITHUB_OUTPUT
          else
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "release_type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          fi

      - name: Create release branch
        run: |
          git checkout -b release/v${{ steps.version.outputs.release_type }}-$(date +%Y%m%d-%H%M%S)

      - name: Update version
        run: |
          # Get current version from pyproject.toml
          CURRENT_VERSION=$(grep 'version = ' pyproject.toml | cut -d'"' -f2)
          echo "Current version: $CURRENT_VERSION"

          # Parse version components
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Calculate new version based on release type
          if [ "${{ steps.version.outputs.prerelease }}" = "true" ]; then
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}-alpha.$(date +%Y%m%d)"
          else
            case "${{ steps.version.outputs.release_type }}" in
              "major")
                NEW_VERSION="$((MAJOR + 1)).0.0"
                ;;
              "minor")
                NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
                ;;
              "patch")
                NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
                ;;
            esac
          fi

          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

          # Update pyproject.toml
          sed -i "s/version = \".*\"/version = \"$NEW_VERSION\"/" pyproject.toml

      - name: Generate changelog
        run: |
          # Generate changelog from git commits
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## [${{ steps.version.outputs.new_version }}] - $(date +%Y-%m-%d)" >> CHANGELOG.md
          echo "" >> CHANGELOG.md

          # Get commits since last tag
          if git tag --sort=-version:refname | head -1 > /dev/null 2>&1; then
            LAST_TAG=$(git tag --sort=-version:refname | head -1)
            echo "### Added" >> CHANGELOG.md
            git log --oneline --no-merges $LAST_TAG..HEAD | sed 's/^/- /' >> CHANGELOG.md
          else
            echo "### Added" >> CHANGELOG.md
            git log --oneline --no-merges | sed 's/^/- /' >> CHANGELOG.md
          fi

      - name: Commit changes
        run: |
          git add pyproject.toml CHANGELOG.md
          git commit -m "Bump version to ${{ steps.version.outputs.new_version }}"
          git push origin HEAD

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Release ${{ steps.version.outputs.new_version }}"
          body: |
            ## Release ${{ steps.version.outputs.new_version }}

            This PR prepares the release for version ${{ steps.version.outputs.new_version }}.

            ### Changes:
            - Updated version in pyproject.toml
            - Generated changelog

            ### Next steps:
            1. Review the changes
            2. Merge this PR
            3. Create a tag: `git tag v${{ steps.version.outputs.new_version }}`
            4. Push the tag: `git push origin v${{ steps.version.outputs.new_version }}`

            The release workflow will automatically publish to PyPI when the tag is pushed.
          branch: "release-${{ steps.version.outputs.new_version }}"
          delete-branch: false
