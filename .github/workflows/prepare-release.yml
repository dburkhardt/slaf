name: Prepare Release

on:
  workflow_dispatch:
    inputs:
      release_type:
        description: "Release type"
        required: true
        default: "patch"
        type: choice
        options:
          - patch
          - minor
          - major
      prerelease:
        description: "Is this a prerelease?"
        required: false
        default: false
        type: boolean

permissions:
  contents: write
  pull-requests: write

jobs:
  prepare-release:
    name: Prepare Release
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Setup uv
        uses: astral-sh/setup-uv@v1
        with:
          version: "latest"

      - name: Cache uv dependencies
        uses: actions/cache@v4
        with:
          path: |
            ~/.cache/uv
            .uv
          key: ${{ runner.os }}-uv-${{ hashFiles('pyproject.toml', 'uv.lock') }}
          restore-keys: |
            ${{ runner.os }}-uv-

      - name: Install dependencies
        run: |
          uv sync --extra dev

      - name: Configure Git
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"

      - name: Determine version bump
        id: version
        run: |
          # Get current version from pyproject.toml
          CURRENT_VERSION=$(grep 'version = ' pyproject.toml | cut -d'"' -f2)
          echo "Current version: $CURRENT_VERSION"

          # Parse version components
          IFS='.' read -ra VERSION_PARTS <<< "$CURRENT_VERSION"
          MAJOR=${VERSION_PARTS[0]}
          MINOR=${VERSION_PARTS[1]}
          PATCH=${VERSION_PARTS[2]}

          # Calculate new version based on release type
          if [ "${{ github.event.inputs.prerelease }}" = "true" ]; then
            NEW_VERSION="${MAJOR}.${MINOR}.${PATCH}-alpha.$(date +%Y%m%d)"
            echo "prerelease=true" >> $GITHUB_OUTPUT
            echo "release_type=prerelease" >> $GITHUB_OUTPUT
          else
            case "${{ github.event.inputs.release_type }}" in
              "major")
                NEW_VERSION="$((MAJOR + 1)).0.0"
                ;;
              "minor")
                NEW_VERSION="${MAJOR}.$((MINOR + 1)).0"
                ;;
              "patch")
                NEW_VERSION="${MAJOR}.${MINOR}.$((PATCH + 1))"
                ;;
            esac
            echo "prerelease=false" >> $GITHUB_OUTPUT
            echo "release_type=${{ github.event.inputs.release_type }}" >> $GITHUB_OUTPUT
          fi

          echo "New version: $NEW_VERSION"
          echo "new_version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Create release branch
        run: |
          git checkout -b release-${{ steps.version.outputs.new_version }}

      - name: Update version
        run: |
          # Update pyproject.toml with the calculated version
          sed -i "s/version = \".*\"/version = \"${{ steps.version.outputs.new_version }}\"/" pyproject.toml

          # Update uv.lock to reflect the new version
          uv lock --no-upgrade

      - name: Generate changelog
        run: |
          # Generate changelog from git commits
          echo "# Changelog" > CHANGELOG.md
          echo "" >> CHANGELOG.md
          echo "## [${{ steps.version.outputs.new_version }}] - $(date +%Y-%m-%d)" >> CHANGELOG.md
          echo "" >> CHANGELOG.md

          # Get commits since last tag
          LAST_TAG=$(git tag --sort=-version:refname | head -1 2>/dev/null || echo "")
          if [ -n "$LAST_TAG" ]; then
            echo "### Added" >> CHANGELOG.md
            git log --oneline --no-merges $LAST_TAG..HEAD | sed 's/^/- /' >> CHANGELOG.md
          else
            echo "### Added" >> CHANGELOG.md
            git log --oneline --no-merges | sed 's/^/- /' >> CHANGELOG.md
          fi

      - name: Commit changes
        run: |
          git add pyproject.toml uv.lock CHANGELOG.md
          git commit -m "Bump version to ${{ steps.version.outputs.new_version }}"
          git push origin HEAD

      - name: Create Pull Request
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          title: "Release ${{ steps.version.outputs.new_version }}"
          body: |
            ## Release ${{ steps.version.outputs.new_version }}

            This PR prepares the release for version ${{ steps.version.outputs.new_version }}.

            ### Changes:
            - Updated version in pyproject.toml
            - Updated uv.lock
            - Generated changelog

            ### Next steps:
            1. Review the changes
            2. Merge this PR
            3. Create a tag: `git tag v${{ steps.version.outputs.new_version }}`
            4. Push the tag: `git push origin v${{ steps.version.outputs.new_version }}`

            The release workflow will automatically publish to PyPI when the tag is pushed.
          branch: "release-${{ steps.version.outputs.new_version }}"
          base: "main"
          delete-branch: false
